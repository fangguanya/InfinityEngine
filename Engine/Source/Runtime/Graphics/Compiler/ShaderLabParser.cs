//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./ShaderLab.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class ShaderLabParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		String=25, MetaInfo=26, HLSL=27, Identifier=28, Sign=29, IntegerLiteral=30, 
		FloatingLiteral=31, ExponentPart=32, CullMode=33, Comparator=34, ZWriteMode=35, 
		Channel=36, Whitespace=37, Newline=38, BlockComment=39, LineComment=40;
	public const int
		RULE_shader = 0, RULE_properties = 1, RULE_property = 2, RULE_property_int = 3, 
		RULE_property_float = 4, RULE_property_range = 5, RULE_property_color = 6, 
		RULE_property_vector = 7, RULE_property_2d = 8, RULE_property_cube = 9, 
		RULE_property_3d = 10, RULE_category = 11, RULE_kernel = 12, RULE_hlsl_block = 13, 
		RULE_tags = 14, RULE_tag = 15, RULE_common_state = 16, RULE_cull = 17, 
		RULE_ztest = 18, RULE_zwrite = 19, RULE_color_mask = 20, RULE_meta = 21, 
		RULE_range = 22, RULE_tag_key = 23, RULE_tag_val = 24, RULE_shader_name = 25, 
		RULE_display_name = 26, RULE_texture_name = 27, RULE_property_identifier = 28, 
		RULE_val_int = 29, RULE_val_float = 30, RULE_val_min = 31, RULE_val_max = 32, 
		RULE_val_vec4 = 33, RULE_channel = 34;
	public static readonly string[] ruleNames = {
		"shader", "properties", "property", "property_int", "property_float", 
		"property_range", "property_color", "property_vector", "property_2d", 
		"property_cube", "property_3d", "category", "kernel", "hlsl_block", "tags", 
		"tag", "common_state", "cull", "ztest", "zwrite", "color_mask", "meta", 
		"range", "tag_key", "tag_val", "shader_name", "display_name", "texture_name", 
		"property_identifier", "val_int", "val_float", "val_min", "val_max", "val_vec4", 
		"channel"
	};

	private static readonly string[] _LiteralNames = {
		null, "'Shader'", "'{'", "'}'", "'Properties'", "'('", "','", "'Int'", 
		"')'", "'='", "'Float'", "'Range'", "'Color'", "'Vector'", "'2D'", "'{}'", 
		"'Cube'", "'3D'", "'Category'", "'Kernel'", "'Tags'", "'Cull'", "'ZTest'", 
		"'ZWrite'", "'ColorMask'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "String", "MetaInfo", "HLSL", "Identifier", "Sign", "IntegerLiteral", 
		"FloatingLiteral", "ExponentPart", "CullMode", "Comparator", "ZWriteMode", 
		"Channel", "Whitespace", "Newline", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ShaderLab.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static ShaderLabParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ShaderLabParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ShaderLabParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ShaderContext : ParserRuleContext {
		public Shader_nameContext shader_name() {
			return GetRuleContext<Shader_nameContext>(0);
		}
		public CategoryContext category() {
			return GetRuleContext<CategoryContext>(0);
		}
		public PropertiesContext properties() {
			return GetRuleContext<PropertiesContext>(0);
		}
		public ShaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterShader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitShader(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShaderContext shader() {
		ShaderContext _localctx = new ShaderContext(Context, State);
		EnterRule(_localctx, 0, RULE_shader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 70; Match(T__0);
			State = 71; shader_name();
			State = 72; Match(T__1);
			State = 74;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__3) {
				{
				State = 73; properties();
				}
			}

			State = 76; category();
			State = 77; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertiesContext : ParserRuleContext {
		public PropertyContext[] property() {
			return GetRuleContexts<PropertyContext>();
		}
		public PropertyContext property(int i) {
			return GetRuleContext<PropertyContext>(i);
		}
		public PropertiesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_properties; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperties(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperties(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperties(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertiesContext properties() {
		PropertiesContext _localctx = new PropertiesContext(Context, State);
		EnterRule(_localctx, 2, RULE_properties);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79; Match(T__3);
			State = 80; Match(T__1);
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 81; property();
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==MetaInfo || _la==Identifier );
			State = 86; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyContext : ParserRuleContext {
		public Property_intContext property_int() {
			return GetRuleContext<Property_intContext>(0);
		}
		public Property_floatContext property_float() {
			return GetRuleContext<Property_floatContext>(0);
		}
		public Property_rangeContext property_range() {
			return GetRuleContext<Property_rangeContext>(0);
		}
		public Property_colorContext property_color() {
			return GetRuleContext<Property_colorContext>(0);
		}
		public Property_vectorContext property_vector() {
			return GetRuleContext<Property_vectorContext>(0);
		}
		public Property_2dContext property_2d() {
			return GetRuleContext<Property_2dContext>(0);
		}
		public Property_cubeContext property_cube() {
			return GetRuleContext<Property_cubeContext>(0);
		}
		public Property_3dContext property_3d() {
			return GetRuleContext<Property_3dContext>(0);
		}
		public PropertyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PropertyContext property() {
		PropertyContext _localctx = new PropertyContext(Context, State);
		EnterRule(_localctx, 4, RULE_property);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 88; property_int();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 89; property_float();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 90; property_range();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 91; property_color();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 92; property_vector();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 93; property_2d();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 94; property_cube();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 95; property_3d();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_intContext : ParserRuleContext {
		public Property_identifierContext property_identifier() {
			return GetRuleContext<Property_identifierContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Val_intContext val_int() {
			return GetRuleContext<Val_intContext>(0);
		}
		public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public Property_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_int(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_int(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_intContext property_int() {
		Property_intContext _localctx = new Property_intContext(Context, State);
		EnterRule(_localctx, 6, RULE_property_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MetaInfo) {
				{
				{
				State = 98; meta();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 104; property_identifier();
			State = 105; Match(T__4);
			State = 106; display_name();
			State = 107; Match(T__5);
			State = 108; Match(T__6);
			State = 109; Match(T__7);
			State = 110; Match(T__8);
			State = 111; val_int();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_floatContext : ParserRuleContext {
		public Property_identifierContext property_identifier() {
			return GetRuleContext<Property_identifierContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Val_floatContext val_float() {
			return GetRuleContext<Val_floatContext>(0);
		}
		public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public Property_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_float; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_float(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_float(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_floatContext property_float() {
		Property_floatContext _localctx = new Property_floatContext(Context, State);
		EnterRule(_localctx, 8, RULE_property_float);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MetaInfo) {
				{
				{
				State = 113; meta();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 119; property_identifier();
			State = 120; Match(T__4);
			State = 121; display_name();
			State = 122; Match(T__5);
			State = 123; Match(T__9);
			State = 124; Match(T__7);
			State = 125; Match(T__8);
			State = 126; val_float();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_rangeContext : ParserRuleContext {
		public Property_identifierContext property_identifier() {
			return GetRuleContext<Property_identifierContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public Val_floatContext val_float() {
			return GetRuleContext<Val_floatContext>(0);
		}
		public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public Property_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_range(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_range(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_range(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_rangeContext property_range() {
		Property_rangeContext _localctx = new Property_rangeContext(Context, State);
		EnterRule(_localctx, 10, RULE_property_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MetaInfo) {
				{
				{
				State = 128; meta();
				}
				}
				State = 133;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 134; property_identifier();
			State = 135; Match(T__4);
			State = 136; display_name();
			State = 137; Match(T__5);
			State = 138; Match(T__10);
			State = 139; range();
			State = 140; Match(T__7);
			State = 141; Match(T__8);
			State = 142; val_float();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_colorContext : ParserRuleContext {
		public Property_identifierContext property_identifier() {
			return GetRuleContext<Property_identifierContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Val_vec4Context val_vec4() {
			return GetRuleContext<Val_vec4Context>(0);
		}
		public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public Property_colorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_color; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_color(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_color(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_color(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_colorContext property_color() {
		Property_colorContext _localctx = new Property_colorContext(Context, State);
		EnterRule(_localctx, 12, RULE_property_color);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MetaInfo) {
				{
				{
				State = 144; meta();
				}
				}
				State = 149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 150; property_identifier();
			State = 151; Match(T__4);
			State = 152; display_name();
			State = 153; Match(T__5);
			State = 154; Match(T__11);
			State = 155; Match(T__7);
			State = 156; Match(T__8);
			State = 157; val_vec4();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_vectorContext : ParserRuleContext {
		public Property_identifierContext property_identifier() {
			return GetRuleContext<Property_identifierContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Val_vec4Context val_vec4() {
			return GetRuleContext<Val_vec4Context>(0);
		}
		public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public Property_vectorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_vector; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_vector(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_vector(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_vector(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_vectorContext property_vector() {
		Property_vectorContext _localctx = new Property_vectorContext(Context, State);
		EnterRule(_localctx, 14, RULE_property_vector);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MetaInfo) {
				{
				{
				State = 159; meta();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165; property_identifier();
			State = 166; Match(T__4);
			State = 167; display_name();
			State = 168; Match(T__5);
			State = 169; Match(T__12);
			State = 170; Match(T__7);
			State = 171; Match(T__8);
			State = 172; val_vec4();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_2dContext : ParserRuleContext {
		public Property_identifierContext property_identifier() {
			return GetRuleContext<Property_identifierContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Texture_nameContext texture_name() {
			return GetRuleContext<Texture_nameContext>(0);
		}
		public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public Property_2dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_2d; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_2d(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_2d(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_2d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_2dContext property_2d() {
		Property_2dContext _localctx = new Property_2dContext(Context, State);
		EnterRule(_localctx, 16, RULE_property_2d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 177;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MetaInfo) {
				{
				{
				State = 174; meta();
				}
				}
				State = 179;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 180; property_identifier();
			State = 181; Match(T__4);
			State = 182; display_name();
			State = 183; Match(T__5);
			State = 184; Match(T__13);
			State = 185; Match(T__7);
			State = 186; Match(T__8);
			State = 187; texture_name();
			State = 188; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_cubeContext : ParserRuleContext {
		public Property_identifierContext property_identifier() {
			return GetRuleContext<Property_identifierContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Texture_nameContext texture_name() {
			return GetRuleContext<Texture_nameContext>(0);
		}
		public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public Property_cubeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_cube; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_cube(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_cube(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_cube(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_cubeContext property_cube() {
		Property_cubeContext _localctx = new Property_cubeContext(Context, State);
		EnterRule(_localctx, 18, RULE_property_cube);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MetaInfo) {
				{
				{
				State = 190; meta();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 196; property_identifier();
			State = 197; Match(T__4);
			State = 198; display_name();
			State = 199; Match(T__5);
			State = 200; Match(T__15);
			State = 201; Match(T__7);
			State = 202; Match(T__8);
			State = 203; texture_name();
			State = 204; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_3dContext : ParserRuleContext {
		public Property_identifierContext property_identifier() {
			return GetRuleContext<Property_identifierContext>(0);
		}
		public Display_nameContext display_name() {
			return GetRuleContext<Display_nameContext>(0);
		}
		public Texture_nameContext texture_name() {
			return GetRuleContext<Texture_nameContext>(0);
		}
		public MetaContext[] meta() {
			return GetRuleContexts<MetaContext>();
		}
		public MetaContext meta(int i) {
			return GetRuleContext<MetaContext>(i);
		}
		public Property_3dContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_3d; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_3d(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_3d(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_3d(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_3dContext property_3d() {
		Property_3dContext _localctx = new Property_3dContext(Context, State);
		EnterRule(_localctx, 20, RULE_property_3d);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MetaInfo) {
				{
				{
				State = 206; meta();
				}
				}
				State = 211;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 212; property_identifier();
			State = 213; Match(T__4);
			State = 214; display_name();
			State = 215; Match(T__5);
			State = 216; Match(T__16);
			State = 217; Match(T__7);
			State = 218; Match(T__8);
			State = 219; texture_name();
			State = 220; Match(T__14);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CategoryContext : ParserRuleContext {
		public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public KernelContext[] kernel() {
			return GetRuleContexts<KernelContext>();
		}
		public KernelContext kernel(int i) {
			return GetRuleContext<KernelContext>(i);
		}
		public CategoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_category; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterCategory(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitCategory(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCategory(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CategoryContext category() {
		CategoryContext _localctx = new CategoryContext(Context, State);
		EnterRule(_localctx, 22, RULE_category);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222; Match(T__17);
			State = 223; Match(T__1);
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__19) {
				{
				State = 224; tags();
				}
			}

			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 227; kernel();
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T__18 );
			State = 232; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KernelContext : ParserRuleContext {
		public TagsContext tags() {
			return GetRuleContext<TagsContext>(0);
		}
		public Hlsl_blockContext hlsl_block() {
			return GetRuleContext<Hlsl_blockContext>(0);
		}
		public Common_stateContext[] common_state() {
			return GetRuleContexts<Common_stateContext>();
		}
		public Common_stateContext common_state(int i) {
			return GetRuleContext<Common_stateContext>(i);
		}
		public KernelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_kernel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterKernel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitKernel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKernel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KernelContext kernel() {
		KernelContext _localctx = new KernelContext(Context, State);
		EnterRule(_localctx, 24, RULE_kernel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234; Match(T__18);
			State = 235; Match(T__1);
			State = 236; tags();
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23))) != 0)) {
				{
				{
				State = 237; common_state();
				}
				}
				State = 242;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 243; hlsl_block();
			State = 244; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Hlsl_blockContext : ParserRuleContext {
		public ITerminalNode HLSL() { return GetToken(ShaderLabParser.HLSL, 0); }
		public Hlsl_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_hlsl_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterHlsl_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitHlsl_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitHlsl_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Hlsl_blockContext hlsl_block() {
		Hlsl_blockContext _localctx = new Hlsl_blockContext(Context, State);
		EnterRule(_localctx, 26, RULE_hlsl_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(HLSL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagsContext : ParserRuleContext {
		public TagContext[] tag() {
			return GetRuleContexts<TagContext>();
		}
		public TagContext tag(int i) {
			return GetRuleContext<TagContext>(i);
		}
		public TagsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tags; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterTags(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitTags(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTags(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagsContext tags() {
		TagsContext _localctx = new TagsContext(Context, State);
		EnterRule(_localctx, 28, RULE_tags);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; Match(T__19);
			State = 249; Match(T__1);
			State = 251;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 250; tag();
				}
				}
				State = 253;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==String );
			State = 255; Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TagContext : ParserRuleContext {
		public Tag_keyContext tag_key() {
			return GetRuleContext<Tag_keyContext>(0);
		}
		public Tag_valContext tag_val() {
			return GetRuleContext<Tag_valContext>(0);
		}
		public TagContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterTag(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitTag(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TagContext tag() {
		TagContext _localctx = new TagContext(Context, State);
		EnterRule(_localctx, 30, RULE_tag);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; tag_key();
			State = 258; Match(T__8);
			State = 259; tag_val();
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__5) {
				{
				State = 260; Match(T__5);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Common_stateContext : ParserRuleContext {
		public CullContext cull() {
			return GetRuleContext<CullContext>(0);
		}
		public ZtestContext ztest() {
			return GetRuleContext<ZtestContext>(0);
		}
		public ZwriteContext zwrite() {
			return GetRuleContext<ZwriteContext>(0);
		}
		public Color_maskContext color_mask() {
			return GetRuleContext<Color_maskContext>(0);
		}
		public Common_stateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_common_state; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterCommon_state(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitCommon_state(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommon_state(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Common_stateContext common_state() {
		Common_stateContext _localctx = new Common_stateContext(Context, State);
		EnterRule(_localctx, 32, RULE_common_state);
		try {
			State = 267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__20:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; cull();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264; ztest();
				}
				break;
			case T__22:
				EnterOuterAlt(_localctx, 3);
				{
				State = 265; zwrite();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 4);
				{
				State = 266; color_mask();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CullContext : ParserRuleContext {
		public ITerminalNode CullMode() { return GetToken(ShaderLabParser.CullMode, 0); }
		public CullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cull; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterCull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitCull(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCull(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CullContext cull() {
		CullContext _localctx = new CullContext(Context, State);
		EnterRule(_localctx, 34, RULE_cull);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; Match(T__20);
			State = 270; Match(CullMode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZtestContext : ParserRuleContext {
		public ITerminalNode Comparator() { return GetToken(ShaderLabParser.Comparator, 0); }
		public ZtestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ztest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterZtest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitZtest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZtest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZtestContext ztest() {
		ZtestContext _localctx = new ZtestContext(Context, State);
		EnterRule(_localctx, 36, RULE_ztest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(T__21);
			State = 273; Match(Comparator);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ZwriteContext : ParserRuleContext {
		public ITerminalNode ZWriteMode() { return GetToken(ShaderLabParser.ZWriteMode, 0); }
		public ZwriteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_zwrite; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterZwrite(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitZwrite(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitZwrite(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ZwriteContext zwrite() {
		ZwriteContext _localctx = new ZwriteContext(Context, State);
		EnterRule(_localctx, 38, RULE_zwrite);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 275; Match(T__22);
			State = 276; Match(ZWriteMode);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Color_maskContext : ParserRuleContext {
		public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public Color_maskContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_color_mask; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterColor_mask(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitColor_mask(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitColor_mask(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Color_maskContext color_mask() {
		Color_maskContext _localctx = new Color_maskContext(Context, State);
		EnterRule(_localctx, 40, RULE_color_mask);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 278; Match(T__23);
			State = 279; channel();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetaContext : ParserRuleContext {
		public ITerminalNode MetaInfo() { return GetToken(ShaderLabParser.MetaInfo, 0); }
		public MetaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_meta; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterMeta(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitMeta(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeta(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MetaContext meta() {
		MetaContext _localctx = new MetaContext(Context, State);
		EnterRule(_localctx, 42, RULE_meta);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281; Match(MetaInfo);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public Val_minContext val_min() {
			return GetRuleContext<Val_minContext>(0);
		}
		public Val_maxContext val_max() {
			return GetRuleContext<Val_maxContext>(0);
		}
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(Context, State);
		EnterRule(_localctx, 44, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 283; Match(T__4);
			State = 284; val_min();
			State = 285; Match(T__5);
			State = 286; val_max();
			State = 287; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tag_keyContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(ShaderLabParser.String, 0); }
		public Tag_keyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag_key; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterTag_key(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitTag_key(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag_key(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tag_keyContext tag_key() {
		Tag_keyContext _localctx = new Tag_keyContext(Context, State);
		EnterRule(_localctx, 46, RULE_tag_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 289; Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Tag_valContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(ShaderLabParser.String, 0); }
		public Tag_valContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tag_val; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterTag_val(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitTag_val(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTag_val(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Tag_valContext tag_val() {
		Tag_valContext _localctx = new Tag_valContext(Context, State);
		EnterRule(_localctx, 48, RULE_tag_val);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 291; Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shader_nameContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(ShaderLabParser.String, 0); }
		public Shader_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterShader_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitShader_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShader_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shader_nameContext shader_name() {
		Shader_nameContext _localctx = new Shader_nameContext(Context, State);
		EnterRule(_localctx, 50, RULE_shader_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Display_nameContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(ShaderLabParser.String, 0); }
		public Display_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_display_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterDisplay_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitDisplay_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplay_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Display_nameContext display_name() {
		Display_nameContext _localctx = new Display_nameContext(Context, State);
		EnterRule(_localctx, 52, RULE_display_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Texture_nameContext : ParserRuleContext {
		public ITerminalNode String() { return GetToken(ShaderLabParser.String, 0); }
		public Texture_nameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_texture_name; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterTexture_name(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitTexture_name(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTexture_name(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Texture_nameContext texture_name() {
		Texture_nameContext _localctx = new Texture_nameContext(Context, State);
		EnterRule(_localctx, 54, RULE_texture_name);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(String);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Property_identifierContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(ShaderLabParser.Identifier, 0); }
		public Property_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_property_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterProperty_identifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitProperty_identifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProperty_identifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Property_identifierContext property_identifier() {
		Property_identifierContext _localctx = new Property_identifierContext(Context, State);
		EnterRule(_localctx, 56, RULE_property_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 299; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val_intContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public ITerminalNode Sign() { return GetToken(ShaderLabParser.Sign, 0); }
		public Val_intContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val_int; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterVal_int(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitVal_int(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal_int(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Val_intContext val_int() {
		Val_intContext _localctx = new Val_intContext(Context, State);
		EnterRule(_localctx, 58, RULE_val_int);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 302;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sign) {
				{
				State = 301; Match(Sign);
				}
			}

			State = 304; Match(IntegerLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val_floatContext : ParserRuleContext {
		public ITerminalNode FloatingLiteral() { return GetToken(ShaderLabParser.FloatingLiteral, 0); }
		public ITerminalNode Sign() { return GetToken(ShaderLabParser.Sign, 0); }
		public Val_floatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val_float; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterVal_float(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitVal_float(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal_float(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Val_floatContext val_float() {
		Val_floatContext _localctx = new Val_floatContext(Context, State);
		EnterRule(_localctx, 60, RULE_val_float);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sign) {
				{
				State = 306; Match(Sign);
				}
			}

			State = 309; Match(FloatingLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val_minContext : ParserRuleContext {
		public ITerminalNode FloatingLiteral() { return GetToken(ShaderLabParser.FloatingLiteral, 0); }
		public ITerminalNode Sign() { return GetToken(ShaderLabParser.Sign, 0); }
		public Val_minContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val_min; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterVal_min(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitVal_min(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal_min(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Val_minContext val_min() {
		Val_minContext _localctx = new Val_minContext(Context, State);
		EnterRule(_localctx, 62, RULE_val_min);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sign) {
				{
				State = 311; Match(Sign);
				}
			}

			State = 314; Match(FloatingLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val_maxContext : ParserRuleContext {
		public ITerminalNode FloatingLiteral() { return GetToken(ShaderLabParser.FloatingLiteral, 0); }
		public ITerminalNode Sign() { return GetToken(ShaderLabParser.Sign, 0); }
		public Val_maxContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val_max; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterVal_max(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitVal_max(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal_max(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Val_maxContext val_max() {
		Val_maxContext _localctx = new Val_maxContext(Context, State);
		EnterRule(_localctx, 64, RULE_val_max);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Sign) {
				{
				State = 316; Match(Sign);
				}
			}

			State = 319; Match(FloatingLiteral);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Val_vec4Context : ParserRuleContext {
		public Val_floatContext[] val_float() {
			return GetRuleContexts<Val_floatContext>();
		}
		public Val_floatContext val_float(int i) {
			return GetRuleContext<Val_floatContext>(i);
		}
		public Val_vec4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_val_vec4; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterVal_vec4(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitVal_vec4(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVal_vec4(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Val_vec4Context val_vec4() {
		Val_vec4Context _localctx = new Val_vec4Context(Context, State);
		EnterRule(_localctx, 66, RULE_val_vec4);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 321; Match(T__4);
			State = 322; val_float();
			State = 323; Match(T__5);
			State = 324; val_float();
			State = 325; Match(T__5);
			State = 326; val_float();
			State = 327; Match(T__5);
			State = 328; val_float();
			State = 329; Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContext : ParserRuleContext {
		public ITerminalNode Channel() { return GetToken(ShaderLabParser.Channel, 0); }
		public ITerminalNode IntegerLiteral() { return GetToken(ShaderLabParser.IntegerLiteral, 0); }
		public ChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.EnterChannel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IShaderLabListener typedListener = listener as IShaderLabListener;
			if (typedListener != null) typedListener.ExitChannel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IShaderLabVisitor<TResult> typedVisitor = visitor as IShaderLabVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChannel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContext channel() {
		ChannelContext _localctx = new ChannelContext(Context, State);
		EnterRule(_localctx, 68, RULE_channel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 331;
			_la = TokenStream.LA(1);
			if ( !(_la==IntegerLiteral || _la==Channel) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '*', '\x150', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x5', '\x2', 'M', '\n', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x6', 
		'\x3', 'U', '\n', '\x3', '\r', '\x3', '\xE', '\x3', 'V', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x5', '\x4', 
		'\x63', '\n', '\x4', '\x3', '\x5', '\a', '\x5', '\x66', '\n', '\x5', '\f', 
		'\x5', '\xE', '\x5', 'i', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\a', '\x6', 'u', '\n', '\x6', '\f', 
		'\x6', '\xE', '\x6', 'x', '\v', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\a', '\a', '\x84', '\n', '\a', '\f', 
		'\a', '\xE', '\a', '\x87', '\v', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\b', '\a', '\b', '\x94', '\n', '\b', 
		'\f', '\b', '\xE', '\b', '\x97', '\v', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\t', '\a', '\t', '\xA3', '\n', '\t', '\f', 
		'\t', '\xE', '\t', '\xA6', '\v', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\n', '\a', '\n', '\xB2', '\n', '\n', '\f', '\n', 
		'\xE', '\n', '\xB5', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\a', '\v', '\xC2', '\n', '\v', '\f', 
		'\v', '\xE', '\v', '\xC5', '\v', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\f', '\a', '\f', '\xD2', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\xD5', '\v', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\x5', '\r', '\xE4', '\n', '\r', '\x3', '\r', '\x6', '\r', '\xE7', '\n', 
		'\r', '\r', '\r', '\xE', '\r', '\xE8', '\x3', '\r', '\x3', '\r', '\x3', 
		'\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', '\xF1', 
		'\n', '\xE', '\f', '\xE', '\xE', '\xE', '\xF4', '\v', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x6', '\x10', '\xFE', '\n', '\x10', '\r', 
		'\x10', '\xE', '\x10', '\xFF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x108', '\n', 
		'\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', 
		'\x12', '\x10E', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1F', 
		'\x5', '\x1F', '\x131', '\n', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x5', ' ', '\x136', '\n', ' ', '\x3', ' ', '\x3', ' ', '\x3', '!', 
		'\x5', '!', '\x13B', '\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x5', 
		'\"', '\x140', '\n', '\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x2', 
		'\x2', '%', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', '\x2', '\x3', '\x4', '\x2', ' ', ' ', '&', 
		'&', '\x2', '\x149', '\x2', 'H', '\x3', '\x2', '\x2', '\x2', '\x4', 'Q', 
		'\x3', '\x2', '\x2', '\x2', '\x6', '\x62', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'g', '\x3', '\x2', '\x2', '\x2', '\n', 'v', '\x3', '\x2', '\x2', 
		'\x2', '\f', '\x85', '\x3', '\x2', '\x2', '\x2', '\xE', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x10', '\xA4', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\xB3', '\x3', '\x2', '\x2', '\x2', '\x14', '\xC3', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x18', '\xE0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\xEC', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\xF8', '\x3', '\x2', '\x2', '\x2', '\x1E', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\x103', '\x3', '\x2', '\x2', '\x2', '\"', '\x10D', '\x3', 
		'\x2', '\x2', '\x2', '$', '\x10F', '\x3', '\x2', '\x2', '\x2', '&', '\x112', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x115', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x118', '\x3', '\x2', '\x2', '\x2', ',', '\x11B', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x30', '\x123', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x127', '\x3', '\x2', '\x2', '\x2', '\x36', '\x129', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x12B', '\x3', '\x2', '\x2', '\x2', ':', '\x12D', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x130', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x135', '\x3', '\x2', '\x2', '\x2', '@', '\x13A', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x44', '\x143', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x14D', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\a', '\x3', '\x2', '\x2', 'I', 'J', '\x5', '\x34', '\x1B', 
		'\x2', 'J', 'L', '\a', '\x4', '\x2', '\x2', 'K', 'M', '\x5', '\x4', '\x3', 
		'\x2', 'L', 'K', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'M', 'N', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\x18', 
		'\r', '\x2', 'O', 'P', '\a', '\x5', '\x2', '\x2', 'P', '\x3', '\x3', '\x2', 
		'\x2', '\x2', 'Q', 'R', '\a', '\x6', '\x2', '\x2', 'R', 'T', '\a', '\x4', 
		'\x2', '\x2', 'S', 'U', '\x5', '\x6', '\x4', '\x2', 'T', 'S', '\x3', '\x2', 
		'\x2', '\x2', 'U', 'V', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'V', 'W', '\x3', '\x2', '\x2', '\x2', 'W', 'X', '\x3', '\x2', 
		'\x2', '\x2', 'X', 'Y', '\a', '\x5', '\x2', '\x2', 'Y', '\x5', '\x3', 
		'\x2', '\x2', '\x2', 'Z', '\x63', '\x5', '\b', '\x5', '\x2', '[', '\x63', 
		'\x5', '\n', '\x6', '\x2', '\\', '\x63', '\x5', '\f', '\a', '\x2', ']', 
		'\x63', '\x5', '\xE', '\b', '\x2', '^', '\x63', '\x5', '\x10', '\t', '\x2', 
		'_', '\x63', '\x5', '\x12', '\n', '\x2', '`', '\x63', '\x5', '\x14', '\v', 
		'\x2', '\x61', '\x63', '\x5', '\x16', '\f', '\x2', '\x62', 'Z', '\x3', 
		'\x2', '\x2', '\x2', '\x62', '[', '\x3', '\x2', '\x2', '\x2', '\x62', 
		'\\', '\x3', '\x2', '\x2', '\x2', '\x62', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '^', '\x3', '\x2', '\x2', '\x2', '\x62', '_', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '`', '\x3', '\x2', '\x2', '\x2', '\x62', '\x61', '\x3', 
		'\x2', '\x2', '\x2', '\x63', '\a', '\x3', '\x2', '\x2', '\x2', '\x64', 
		'\x66', '\x5', ',', '\x17', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x66', 'i', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', 'j', '\x3', '\x2', 
		'\x2', '\x2', 'i', 'g', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\x5', ':', 
		'\x1E', '\x2', 'k', 'l', '\a', '\a', '\x2', '\x2', 'l', 'm', '\x5', '\x36', 
		'\x1C', '\x2', 'm', 'n', '\a', '\b', '\x2', '\x2', 'n', 'o', '\a', '\t', 
		'\x2', '\x2', 'o', 'p', '\a', '\n', '\x2', '\x2', 'p', 'q', '\a', '\v', 
		'\x2', '\x2', 'q', 'r', '\x5', '<', '\x1F', '\x2', 'r', '\t', '\x3', '\x2', 
		'\x2', '\x2', 's', 'u', '\x5', ',', '\x17', '\x2', 't', 's', '\x3', '\x2', 
		'\x2', '\x2', 'u', 'x', '\x3', '\x2', '\x2', '\x2', 'v', 't', '\x3', '\x2', 
		'\x2', '\x2', 'v', 'w', '\x3', '\x2', '\x2', '\x2', 'w', 'y', '\x3', '\x2', 
		'\x2', '\x2', 'x', 'v', '\x3', '\x2', '\x2', '\x2', 'y', 'z', '\x5', ':', 
		'\x1E', '\x2', 'z', '{', '\a', '\a', '\x2', '\x2', '{', '|', '\x5', '\x36', 
		'\x1C', '\x2', '|', '}', '\a', '\b', '\x2', '\x2', '}', '~', '\a', '\f', 
		'\x2', '\x2', '~', '\x7F', '\a', '\n', '\x2', '\x2', '\x7F', '\x80', '\a', 
		'\v', '\x2', '\x2', '\x80', '\x81', '\x5', '>', ' ', '\x2', '\x81', '\v', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x84', '\x5', ',', '\x17', '\x2', 
		'\x83', '\x82', '\x3', '\x2', '\x2', '\x2', '\x84', '\x87', '\x3', '\x2', 
		'\x2', '\x2', '\x85', '\x83', '\x3', '\x2', '\x2', '\x2', '\x85', '\x86', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x88', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x85', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\x5', ':', 
		'\x1E', '\x2', '\x89', '\x8A', '\a', '\a', '\x2', '\x2', '\x8A', '\x8B', 
		'\x5', '\x36', '\x1C', '\x2', '\x8B', '\x8C', '\a', '\b', '\x2', '\x2', 
		'\x8C', '\x8D', '\a', '\r', '\x2', '\x2', '\x8D', '\x8E', '\x5', '.', 
		'\x18', '\x2', '\x8E', '\x8F', '\a', '\n', '\x2', '\x2', '\x8F', '\x90', 
		'\a', '\v', '\x2', '\x2', '\x90', '\x91', '\x5', '>', ' ', '\x2', '\x91', 
		'\r', '\x3', '\x2', '\x2', '\x2', '\x92', '\x94', '\x5', ',', '\x17', 
		'\x2', '\x93', '\x92', '\x3', '\x2', '\x2', '\x2', '\x94', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x95', 
		'\x96', '\x3', '\x2', '\x2', '\x2', '\x96', '\x98', '\x3', '\x2', '\x2', 
		'\x2', '\x97', '\x95', '\x3', '\x2', '\x2', '\x2', '\x98', '\x99', '\x5', 
		':', '\x1E', '\x2', '\x99', '\x9A', '\a', '\a', '\x2', '\x2', '\x9A', 
		'\x9B', '\x5', '\x36', '\x1C', '\x2', '\x9B', '\x9C', '\a', '\b', '\x2', 
		'\x2', '\x9C', '\x9D', '\a', '\xE', '\x2', '\x2', '\x9D', '\x9E', '\a', 
		'\n', '\x2', '\x2', '\x9E', '\x9F', '\a', '\v', '\x2', '\x2', '\x9F', 
		'\xA0', '\x5', '\x44', '#', '\x2', '\xA0', '\xF', '\x3', '\x2', '\x2', 
		'\x2', '\xA1', '\xA3', '\x5', ',', '\x17', '\x2', '\xA2', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\xA3', '\xA6', '\x3', '\x2', '\x2', '\x2', '\xA4', 
		'\xA2', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', '\x2', '\x2', 
		'\x2', '\xA5', '\xA7', '\x3', '\x2', '\x2', '\x2', '\xA6', '\xA4', '\x3', 
		'\x2', '\x2', '\x2', '\xA7', '\xA8', '\x5', ':', '\x1E', '\x2', '\xA8', 
		'\xA9', '\a', '\a', '\x2', '\x2', '\xA9', '\xAA', '\x5', '\x36', '\x1C', 
		'\x2', '\xAA', '\xAB', '\a', '\b', '\x2', '\x2', '\xAB', '\xAC', '\a', 
		'\xF', '\x2', '\x2', '\xAC', '\xAD', '\a', '\n', '\x2', '\x2', '\xAD', 
		'\xAE', '\a', '\v', '\x2', '\x2', '\xAE', '\xAF', '\x5', '\x44', '#', 
		'\x2', '\xAF', '\x11', '\x3', '\x2', '\x2', '\x2', '\xB0', '\xB2', '\x5', 
		',', '\x17', '\x2', '\xB1', '\xB0', '\x3', '\x2', '\x2', '\x2', '\xB2', 
		'\xB5', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\xB3', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB6', '\x3', 
		'\x2', '\x2', '\x2', '\xB5', '\xB3', '\x3', '\x2', '\x2', '\x2', '\xB6', 
		'\xB7', '\x5', ':', '\x1E', '\x2', '\xB7', '\xB8', '\a', '\a', '\x2', 
		'\x2', '\xB8', '\xB9', '\x5', '\x36', '\x1C', '\x2', '\xB9', '\xBA', '\a', 
		'\b', '\x2', '\x2', '\xBA', '\xBB', '\a', '\x10', '\x2', '\x2', '\xBB', 
		'\xBC', '\a', '\n', '\x2', '\x2', '\xBC', '\xBD', '\a', '\v', '\x2', '\x2', 
		'\xBD', '\xBE', '\x5', '\x38', '\x1D', '\x2', '\xBE', '\xBF', '\a', '\x11', 
		'\x2', '\x2', '\xBF', '\x13', '\x3', '\x2', '\x2', '\x2', '\xC0', '\xC2', 
		'\x5', ',', '\x17', '\x2', '\xC1', '\xC0', '\x3', '\x2', '\x2', '\x2', 
		'\xC2', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC1', '\x3', '\x2', 
		'\x2', '\x2', '\xC3', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC6', 
		'\x3', '\x2', '\x2', '\x2', '\xC5', '\xC3', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\xC7', '\x5', ':', '\x1E', '\x2', '\xC7', '\xC8', '\a', '\a', 
		'\x2', '\x2', '\xC8', '\xC9', '\x5', '\x36', '\x1C', '\x2', '\xC9', '\xCA', 
		'\a', '\b', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x12', '\x2', '\x2', 
		'\xCB', '\xCC', '\a', '\n', '\x2', '\x2', '\xCC', '\xCD', '\a', '\v', 
		'\x2', '\x2', '\xCD', '\xCE', '\x5', '\x38', '\x1D', '\x2', '\xCE', '\xCF', 
		'\a', '\x11', '\x2', '\x2', '\xCF', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\xD2', '\x5', ',', '\x17', '\x2', '\xD1', '\xD0', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', 
		'\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', 
		'\xD4', '\xD6', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', 
		'\x2', '\x2', '\xD6', '\xD7', '\x5', ':', '\x1E', '\x2', '\xD7', '\xD8', 
		'\a', '\a', '\x2', '\x2', '\xD8', '\xD9', '\x5', '\x36', '\x1C', '\x2', 
		'\xD9', '\xDA', '\a', '\b', '\x2', '\x2', '\xDA', '\xDB', '\a', '\x13', 
		'\x2', '\x2', '\xDB', '\xDC', '\a', '\n', '\x2', '\x2', '\xDC', '\xDD', 
		'\a', '\v', '\x2', '\x2', '\xDD', '\xDE', '\x5', '\x38', '\x1D', '\x2', 
		'\xDE', '\xDF', '\a', '\x11', '\x2', '\x2', '\xDF', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\xE0', '\xE1', '\a', '\x14', '\x2', '\x2', '\xE1', '\xE3', 
		'\a', '\x4', '\x2', '\x2', '\xE2', '\xE4', '\x5', '\x1E', '\x10', '\x2', 
		'\xE3', '\xE2', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', 
		'\x2', '\x2', '\xE4', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE7', 
		'\x5', '\x1A', '\xE', '\x2', '\xE6', '\xE5', '\x3', '\x2', '\x2', '\x2', 
		'\xE7', '\xE8', '\x3', '\x2', '\x2', '\x2', '\xE8', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\xE9', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\xEB', '\a', '\x5', '\x2', '\x2', 
		'\xEB', '\x19', '\x3', '\x2', '\x2', '\x2', '\xEC', '\xED', '\a', '\x15', 
		'\x2', '\x2', '\xED', '\xEE', '\a', '\x4', '\x2', '\x2', '\xEE', '\xF2', 
		'\x5', '\x1E', '\x10', '\x2', '\xEF', '\xF1', '\x5', '\"', '\x12', '\x2', 
		'\xF0', '\xEF', '\x3', '\x2', '\x2', '\x2', '\xF1', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', 
		'\x3', '\x2', '\x2', '\x2', '\xF3', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF4', '\xF2', '\x3', '\x2', '\x2', '\x2', '\xF5', '\xF6', '\x5', '\x1C', 
		'\xF', '\x2', '\xF6', '\xF7', '\a', '\x5', '\x2', '\x2', '\xF7', '\x1B', 
		'\x3', '\x2', '\x2', '\x2', '\xF8', '\xF9', '\a', '\x1D', '\x2', '\x2', 
		'\xF9', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xFA', '\xFB', '\a', '\x16', 
		'\x2', '\x2', '\xFB', '\xFD', '\a', '\x4', '\x2', '\x2', '\xFC', '\xFE', 
		'\x5', ' ', '\x11', '\x2', '\xFD', '\xFC', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\xFF', '\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', 
		'\x2', '\x2', '\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\x101', '\x102', '\a', '\x5', '\x2', '\x2', 
		'\x102', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x103', '\x104', '\x5', 
		'\x30', '\x19', '\x2', '\x104', '\x105', '\a', '\v', '\x2', '\x2', '\x105', 
		'\x107', '\x5', '\x32', '\x1A', '\x2', '\x106', '\x108', '\a', '\b', '\x2', 
		'\x2', '\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x107', '\x108', 
		'\x3', '\x2', '\x2', '\x2', '\x108', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x109', '\x10E', '\x5', '$', '\x13', '\x2', '\x10A', '\x10E', '\x5', 
		'&', '\x14', '\x2', '\x10B', '\x10E', '\x5', '(', '\x15', '\x2', '\x10C', 
		'\x10E', '\x5', '*', '\x16', '\x2', '\x10D', '\x109', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\x10A', '\x3', '\x2', '\x2', '\x2', '\x10D', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x10D', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\x10E', '#', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x110', '\a', '\x17', 
		'\x2', '\x2', '\x110', '\x111', '\a', '#', '\x2', '\x2', '\x111', '%', 
		'\x3', '\x2', '\x2', '\x2', '\x112', '\x113', '\a', '\x18', '\x2', '\x2', 
		'\x113', '\x114', '\a', '$', '\x2', '\x2', '\x114', '\'', '\x3', '\x2', 
		'\x2', '\x2', '\x115', '\x116', '\a', '\x19', '\x2', '\x2', '\x116', '\x117', 
		'\a', '%', '\x2', '\x2', '\x117', ')', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x119', '\a', '\x1A', '\x2', '\x2', '\x119', '\x11A', '\x5', '\x46', 
		'$', '\x2', '\x11A', '+', '\x3', '\x2', '\x2', '\x2', '\x11B', '\x11C', 
		'\a', '\x1C', '\x2', '\x2', '\x11C', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x11D', '\x11E', '\a', '\a', '\x2', '\x2', '\x11E', '\x11F', '\x5', '@', 
		'!', '\x2', '\x11F', '\x120', '\a', '\b', '\x2', '\x2', '\x120', '\x121', 
		'\x5', '\x42', '\"', '\x2', '\x121', '\x122', '\a', '\n', '\x2', '\x2', 
		'\x122', '/', '\x3', '\x2', '\x2', '\x2', '\x123', '\x124', '\a', '\x1B', 
		'\x2', '\x2', '\x124', '\x31', '\x3', '\x2', '\x2', '\x2', '\x125', '\x126', 
		'\a', '\x1B', '\x2', '\x2', '\x126', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x128', '\a', '\x1B', '\x2', '\x2', '\x128', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\a', '\x1B', '\x2', '\x2', '\x12A', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', '\x1B', '\x2', 
		'\x2', '\x12C', '\x39', '\x3', '\x2', '\x2', '\x2', '\x12D', '\x12E', 
		'\a', '\x1E', '\x2', '\x2', '\x12E', ';', '\x3', '\x2', '\x2', '\x2', 
		'\x12F', '\x131', '\a', '\x1F', '\x2', '\x2', '\x130', '\x12F', '\x3', 
		'\x2', '\x2', '\x2', '\x130', '\x131', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\a', ' ', '\x2', 
		'\x2', '\x133', '=', '\x3', '\x2', '\x2', '\x2', '\x134', '\x136', '\a', 
		'\x1F', '\x2', '\x2', '\x135', '\x134', '\x3', '\x2', '\x2', '\x2', '\x135', 
		'\x136', '\x3', '\x2', '\x2', '\x2', '\x136', '\x137', '\x3', '\x2', '\x2', 
		'\x2', '\x137', '\x138', '\a', '!', '\x2', '\x2', '\x138', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x139', '\x13B', '\a', '\x1F', '\x2', '\x2', '\x13A', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x13B', '\x3', '\x2', '\x2', 
		'\x2', '\x13B', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x13D', 
		'\a', '!', '\x2', '\x2', '\x13D', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x13E', '\x140', '\a', '\x1F', '\x2', '\x2', '\x13F', '\x13E', '\x3', 
		'\x2', '\x2', '\x2', '\x13F', '\x140', '\x3', '\x2', '\x2', '\x2', '\x140', 
		'\x141', '\x3', '\x2', '\x2', '\x2', '\x141', '\x142', '\a', '!', '\x2', 
		'\x2', '\x142', '\x43', '\x3', '\x2', '\x2', '\x2', '\x143', '\x144', 
		'\a', '\a', '\x2', '\x2', '\x144', '\x145', '\x5', '>', ' ', '\x2', '\x145', 
		'\x146', '\a', '\b', '\x2', '\x2', '\x146', '\x147', '\x5', '>', ' ', 
		'\x2', '\x147', '\x148', '\a', '\b', '\x2', '\x2', '\x148', '\x149', '\x5', 
		'>', ' ', '\x2', '\x149', '\x14A', '\a', '\b', '\x2', '\x2', '\x14A', 
		'\x14B', '\x5', '>', ' ', '\x2', '\x14B', '\x14C', '\a', '\n', '\x2', 
		'\x2', '\x14C', '\x45', '\x3', '\x2', '\x2', '\x2', '\x14D', '\x14E', 
		'\t', '\x2', '\x2', '\x2', '\x14E', 'G', '\x3', '\x2', '\x2', '\x2', '\x17', 
		'L', 'V', '\x62', 'g', 'v', '\x85', '\x95', '\xA4', '\xB3', '\xC3', '\xD3', 
		'\xE3', '\xE8', '\xF2', '\xFF', '\x107', '\x10D', '\x130', '\x135', '\x13A', 
		'\x13F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
